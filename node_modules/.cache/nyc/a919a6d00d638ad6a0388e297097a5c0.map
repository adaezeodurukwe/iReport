{"version":3,"sources":["app.js"],"names":["app","use","bodyParser","json","port","parseInt","process","env","listen","router","req","res","send"],"mappings":";;;;;;AAKA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,MAAMA,MAAM,wBAAZ;;AAEA;AAZA;;;;;AAaAA,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;;AAEA;AACA,MAAMC,OAAOC,SAASC,QAAQC,GAAR,CAAYH,IAArB,EAA2B,EAA3B,KAAkC,IAA/C;;AAEA;AACAJ,IAAIQ,MAAJ,CAAWJ,IAAX;;AAEA;AACAJ,IAAIC,GAAJ,CAAQ,mBAAR,EAA6BQ,gBAA7B;;AAEAT,IAAIC,GAAJ,CAAQ,GAAR,EAAa,CAACS,GAAD,EAAMC,GAAN,KAAc;AACvBA,MAAIC,IAAJ,CAAS,SAAT;AACH,CAFD;;kBAIeZ,G","file":"app.js","sourceRoot":"C:/Users/user pc/Documents/iReport","sourcesContent":["/**\n * app.js\n * Entry point of application\n */\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport router from './server/routes/routes';\n\n// Create instance of express\nconst app = express();\n\n// Set middleware\napp.use(bodyParser.json());\n\n// Set port\nconst port = parseInt(process.env.port, 10) || 3000;\n\n// Set app to listen at port\napp.listen(port);\n\n// Set route\napp.use('/api/v1/red-flags', router);\n\napp.use('/', (req, res) => {\n    res.send('lets go');\n});\n\nexport default app;\n"]}