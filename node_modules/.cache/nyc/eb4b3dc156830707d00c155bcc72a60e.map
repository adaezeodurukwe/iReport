{"version":3,"sources":["validateInput.js"],"names":["signUp","exists","isEmail","isLength","min","signin","record","isIn","parameter","isUUID","Version","updateLocation","updateComment","validationHandler","req","res","next","errors","isEmpty","status","json","array","map","error","msg"],"mappings":";;;;;;;AAEA;;AAEA;AACA,MAAMA,SAAS,CACX,iBAAK,WAAL,EAAkB,oBAAlB,EAAwCC,MAAxC,EADW,EAGX,iBAAK,UAAL,EAAiB,mBAAjB,EAAsCA,MAAtC,EAHW,EAKX,iBAAK,OAAL,EAAc,mBAAd,EAAmCA,MAAnC,GAA4CC,OAA5C,EALW,EAOX,iBAAK,UAAL,EAAiB,kDAAjB,EAAqED,MAArE,GAA8EE,QAA9E,CAAuF,EAAEC,KAAK,CAAP,EAAvF,CAPW,CAAf;;AAWA;AAhBA;;AAiBA,MAAMC,SAAS,CACX,iBAAK,OAAL,EAAc,mBAAd,EAAmCJ,MAAnC,GAA4CC,OAA5C,EADW,EAGX,iBAAK,UAAL,EAAiB,gBAAjB,EAAmCD,MAAnC,EAHW,CAAf;;AAMA;AACA,MAAMK,SAAS,CACX,iBAAK,MAAL,EAAa,kBAAb,EAAiCL,MAAjC,EADW,EAGX,iBAAK,MAAL,EAAa,wDAAb,EAAuEM,IAAvE,CAA4E,UAA5E,EAAwF,cAAxF,CAHW,EAKX,iBAAK,UAAL,EAAiB,sBAAjB,EAAyCN,MAAzC,EALW,EAOX,iBAAK,SAAL,EAAgB,qBAAhB,EAAuCA,MAAvC,GAAgDE,QAAhD,CAAyD,EAAEC,KAAK,EAAP,EAAzD,CAPW,CAAf;;AAUA;AACA,MAAMI,YAAY,CACd,kBAAM,IAAN,EAAY,YAAZ,EAA0BC,MAA1B,CAAiC,EAAEC,SAAS,CAAX,EAAjC,CADc,CAAlB;;AAIA;AACA,MAAMC,iBAAiB,CACnB,iBAAK,UAAL,EAAiB,sBAAjB,EAAyCV,MAAzC,EADmB,CAAvB;;AAIA;AACA,MAAMW,gBAAgB,CAClB,iBAAK,SAAL,EAAgB,qBAAhB,EAAuCX,MAAvC,GAAgDE,QAAhD,CAAyD,EAAEC,KAAK,EAAP,EAAzD,CADkB,CAAtB;;AAKA;AACA,MAAMS,oBAAoB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1C,UAAMC,SAAS,6BAAiBH,GAAjB,CAAf;;AAEA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACnB,eAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,QAAQA,OAAOI,KAAP,GAAeC,GAAf,CAAmBC,SAASA,MAAMC,GAAlC,CAAV,EAArB,CAAP;AACH;AACD,WAAOR,MAAP;AACH,CAPD;;QAWIhB,M,GAAAA,M;QAAQK,M,GAAAA,M;QAAQC,M,GAAAA,M;QAAQK,c,GAAAA,c;QAAgBC,a,GAAAA,a;QAAeJ,S,GAAAA,S;QAAWK,iB,GAAAA,iB","file":"validateInput.js","sourceRoot":"C:/Users/user pc/Documents/iReport/server/middleware","sourcesContent":["// Validate middleware\r\n\r\nimport { body, param, validationResult } from 'express-validator/check';\r\n\r\n// Validate signup input\r\nconst signUp = [\r\n    body('firstname', 'Firstname required').exists(),\r\n\r\n    body('lastname', 'lastname required').exists(),\r\n\r\n    body('email', 'Enter valid email').exists().isEmail(),\r\n\r\n    body('password', 'Password should contain at least four characters').exists().isLength({ min: 4 }),\r\n\r\n];\r\n\r\n// Validate signin input\r\nconst signin = [\r\n    body('email', 'Enter valid email').exists().isEmail(),\r\n\r\n    body('password', 'Enter password').exists(),\r\n];\r\n\r\n// Validate create record input\r\nconst record = [\r\n    body('type', 'Type is required').exists(),\r\n\r\n    body('type', 'type should be either \\'red flag\\' or \\'intervention\\'').isIn('red flag', 'intervention'),\r\n\r\n    body('location', 'Location is required').exists(),\r\n\r\n    body('comment', 'Comment is required').exists().isLength({ min: 10 }),\r\n];\r\n\r\n// Validate param\r\nconst parameter = [\r\n    param('id', 'Invalid id').isUUID({ Version: 4 }),\r\n];\r\n\r\n// Validate update location input\r\nconst updateLocation = [\r\n    body('location', 'Location is required').exists(),\r\n];\r\n\r\n// Validate update comment input\r\nconst updateComment = [\r\n    body('comment', 'Comment is required').exists().isLength({ min: 10 }),\r\n];\r\n\r\n\r\n// Handle validation errors\r\nconst validationHandler = (req, res, next) => {\r\n    const errors = validationResult(req);\r\n\r\n    if (!errors.isEmpty()) {\r\n        return res.status(422).json({ errors: errors.array().map(error => error.msg) });\r\n    }\r\n    return next();\r\n};\r\n\r\n\r\nexport {\r\n    signUp, signin, record, updateLocation, updateComment, parameter, validationHandler,\r\n};\r\n"]}