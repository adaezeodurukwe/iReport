{"version":3,"sources":["recordsModel.js"],"names":["Model","create","createdBy","type","location","images","videos","comment","sql","values","format","rows","pool","query","getAll","userId","getOne","recordId","updateLocation","updateComment","delete"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAGA,MAAMA,KAAN,CAAY;AACR;;;;;;;;;;AAUA,iBAAaC,MAAb,CAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuDC,MAAvD,EAA+DC,OAA/D,EAAwE;AACpE,cAAMC,MAAM,uJAAZ;AACA,cAAMC,SAAS,CACX,kBADW,EAEX,wBAASC,MAAT,CAAgB,YAAhB,CAFW,EAGXR,SAHW,EAIXC,IAJW,EAKXC,QALW,EAMX,OANW,EAOXC,MAPW,EAQXC,MARW,EASXC,OATW,CAAf;;AAYA,cAAM,EAAEI,IAAF,KAAW,MAAMC,kBAAKC,KAAL,CAAWL,GAAX,EAAgBC,MAAhB,CAAvB;AACA,eAAOE,KAAK,CAAL,CAAP;AACH;;AAED;;;;;AAKA,iBAAaG,MAAb,CAAoBC,MAApB,EAA4B;AACxB,cAAMP,MAAM,4CAAZ;AACA,cAAMC,SAAS,CAACM,MAAD,CAAf;;AAEA,cAAM,EAAEJ,IAAF,KAAW,MAAMC,kBAAKC,KAAL,CAAWL,GAAX,EAAgBC,MAAhB,CAAvB;AACA,eAAOE,IAAP;AACH;;AAED;;;;;;AAMA,iBAAaK,MAAb,CAAoBD,MAApB,EAA4BE,QAA5B,EAAsC;AAClC,cAAMT,MAAM,wDAAZ;AACA,cAAMC,SAAS,CAACM,MAAD,EAASE,QAAT,CAAf;;AAEA,cAAM,EAAEN,IAAF,KAAW,MAAMC,kBAAKC,KAAL,CAAWL,GAAX,EAAgBC,MAAhB,CAAvB;AACA,eAAOE,KAAK,CAAL,CAAP;AACH;;AAGD;;;;;;AAMA,iBAAaO,cAAb,CAA4BD,QAA5B,EAAsCb,QAAtC,EAAgD;AAC5C,cAAMI,MAAM,uEAAZ;AACA,cAAMC,SAAS,CAACL,QAAD,EAAWa,QAAX,CAAf;;AAEA,cAAM,EAAEN,IAAF,KAAW,MAAMC,kBAAKC,KAAL,CAAWL,GAAX,EAAgBC,MAAhB,CAAvB;AACA,eAAOE,KAAK,CAAL,CAAP;AACH;;AAED;;;;;;AAMA,iBAAaQ,aAAb,CAA2BF,QAA3B,EAAqCV,OAArC,EAA8C;AAC1C,cAAMC,MAAM,qEAAZ;AACA,cAAMC,SAAS,CAACF,OAAD,EAAUU,QAAV,CAAf;;AAEA,cAAM,EAAEN,IAAF,KAAW,MAAMC,kBAAKC,KAAL,CAAWL,GAAX,EAAgBC,MAAhB,CAAvB;AACA,eAAOE,KAAK,CAAL,CAAP;AACH;;AAED;;;;;;AAMA,iBAAaS,MAAb,CAAoBL,MAApB,EAA4BE,QAA5B,EAAsC;AAClC,cAAMT,MAAM,mEAAZ;AACA,cAAMC,SAAS,CAACM,MAAD,EAASE,QAAT,CAAf;;AAEA,cAAM,EAAEN,IAAF,KAAW,MAAMC,kBAAKC,KAAL,CAAWL,GAAX,EAAgBC,MAAhB,CAAvB;AACA,eAAOE,KAAK,CAAL,CAAP;AACH;AAjGO,C,CAPZ;;kBA2GeX,K","file":"recordsModel.js","sourceRoot":"C:/Users/user pc/Documents/iReport/server/model","sourcesContent":["// Records Model\r\n\r\nimport uuidv4 from 'uuid/v4';\r\nimport moment from 'moment';\r\nimport pool from '../db/connect';\r\n\r\n\r\nclass Model {\r\n    /**\r\n     * @async create\r\n     * @param {*} createdBy\r\n     * @param {*} type\r\n     * @param {*} location\r\n     * @param {*} images\r\n     * @param {*} videos\r\n     * @param {*} comment\r\n     * @returns {object}\r\n     */\r\n    static async create(createdBy, type, location, images, videos, comment) {\r\n        const sql = 'INSERT INTO records(id, createdOn, createdBy, type, location, status, images, videos, comment) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *';\r\n        const values = [\r\n            uuidv4(),\r\n            moment().format('DD/MM/YYYY'),\r\n            createdBy,\r\n            type,\r\n            location,\r\n            'draft',\r\n            images,\r\n            videos,\r\n            comment,\r\n        ];\r\n\r\n        const { rows } = await pool.query(sql, values);\r\n        return rows[0];\r\n    }\r\n\r\n    /**\r\n     * @async getAll\r\n     * @param {*} userId\r\n     * @returns {object}\r\n     */\r\n    static async getAll(userId) {\r\n        const sql = 'SELECT * FROM records WHERE createdBy = $1';\r\n        const values = [userId];\r\n\r\n        const { rows } = await pool.query(sql, values);\r\n        return rows;\r\n    }\r\n\r\n    /**\r\n     * @async getOne\r\n     * @param {*} userId\r\n     * @param {*} type\r\n     * @returns {object}\r\n     */\r\n    static async getOne(userId, recordId) {\r\n        const sql = 'SELECT * FROM records WHERE createdBy = $1 AND id = $2';\r\n        const values = [userId, recordId];\r\n\r\n        const { rows } = await pool.query(sql, values);\r\n        return rows[0];\r\n    }\r\n\r\n\r\n    /**\r\n     * @async updateLocation\r\n     * @param {*} recordId\r\n     * @param {*} location\r\n     * @returns {object}\r\n     */\r\n    static async updateLocation(recordId, location) {\r\n        const sql = 'UPDATE records SET location = $1 WHERE id = $2 RETURNING id, location';\r\n        const values = [location, recordId];\r\n\r\n        const { rows } = await pool.query(sql, values);\r\n        return rows[0];\r\n    }\r\n\r\n    /**\r\n     * @async updateComment\r\n     * @param {*} recordId\r\n     * @param {*} comment\r\n     * @returns {object}\r\n     */\r\n    static async updateComment(recordId, comment) {\r\n        const sql = 'UPDATE records SET comment = $1 WHERE id = $2 RETURNING id, comment';\r\n        const values = [comment, recordId];\r\n\r\n        const { rows } = await pool.query(sql, values);\r\n        return rows[0];\r\n    }\r\n\r\n    /**\r\n     * @async delete\r\n     * @param {*} userId\r\n     * @param {*} recordId\r\n     * @returns {object}\r\n     */\r\n    static async delete(userId, recordId) {\r\n        const sql = 'DELETE FROM records WHERE createdBy = $1 AND id = $2 RETURNING id';\r\n        const values = [userId, recordId];\r\n\r\n        const { rows } = await pool.query(sql, values);\r\n        return rows[0];\r\n    }\r\n}\r\n\r\nexport default Model;\r\n"]}