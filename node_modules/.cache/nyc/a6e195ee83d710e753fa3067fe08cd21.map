{"version":3,"sources":["auth.js"],"names":["Helper","Auth","req","res","next","token","headers","status","send","message","unsigned","verifyToken","userId"],"mappings":";;;;;;AAEA;;IAAYA,M;;;;AAEZ,MAAMC,OAAO,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACnC,UAAMC,QAAQH,IAAII,OAAJ,CAAY,gBAAZ,CAAd;AACA,QAAI,CAACD,KAAL,EAAY;AACR,eAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,cAAX,EAArB,CAAP;AACH;;AAED,UAAMC,WAAW,MAAMV,OAAOW,WAAP,CAAmBN,KAAnB,CAAvB;;AAEAH,QAAIU,MAAJ,GAAaF,SAASE,MAAtB;AACA,WAAOR,MAAP;AACH,CAVD,C,CAJA;;kBAgBeH,I","file":"auth.js","sourceRoot":"C:/Users/user pc/Documents/iReport/server/middleware","sourcesContent":["// Authourization middleware\r\n\r\nimport * as Helper from '../controller/helper';\r\n\r\nconst Auth = async (req, res, next) => {\r\n    const token = req.headers['x-access-token'];\r\n    if (!token) {\r\n        return res.status(401).send({ message: 'unauthorized' });\r\n    }\r\n\r\n    const unsigned = await Helper.verifyToken(token);\r\n\r\n    req.userId = unsigned.userId;\r\n    return next();\r\n};\r\n\r\nexport default Auth;\r\n"]}