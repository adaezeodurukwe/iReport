{"version":3,"sources":["helper.js"],"names":["encryptedPassword","password","bcrypt","hashSync","genSaltSync","compare","plainPassword","hashedPassword","generateToken","id","jwt","sign","userId","process","env","SECRET","expiresIn"],"mappings":";;;;;;;AAEA;;;;AACA;;;;;;AAEA;AALA;;AAMA,MAAMA,oBAAoBC,YAAYC,iBAAOC,QAAP,CAAgBF,QAAhB,EAA0BC,iBAAOE,WAAP,CAAmB,CAAnB,CAA1B,CAAtC;;AAEA;AACA,MAAMC,UAAU,CAACC,aAAD,EAAgBC,cAAhB,KAAmCL,iBAAOG,OAAP,CAAeC,aAAf,EAA8BC,cAA9B,CAAnD;;AAEA;AACA,MAAMC,gBAAgBC,MAAMC,uBAAIC,IAAJ,CAAS,EAAEC,QAAQH,EAAV,EAAT,EAAyBI,QAAQC,GAAR,CAAYC,MAArC,EAA6C,EAAEC,WAAW,IAAb,EAA7C,CAA5B;;QAEShB,iB,GAAAA,iB;QAAmBQ,a,GAAAA,a;QAAeH,O,GAAAA,O","file":"helper.js","sourceRoot":"C:/Users/user pc/Documents/iReport/server/controller","sourcesContent":["// Helper functions\r\n\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\n\r\n// Encrypt password\r\nconst encryptedPassword = password => bcrypt.hashSync(password, bcrypt.genSaltSync(8));\r\n\r\n// Compare passwords\r\nconst compare = (plainPassword, hashedPassword) => bcrypt.compare(plainPassword, hashedPassword);\r\n\r\n// Generate token\r\nconst generateToken = id => jwt.sign({ userId: id }, process.env.SECRET, { expiresIn: '7d' });\r\n\r\nexport { encryptedPassword, generateToken, compare };\r\n"]}